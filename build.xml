<?xml version="1.0"?>
<project name="TangoSourceDistribution" default="build">
    <property environment="env"/>
    <property file="distribution.properties"/>
    <property name="builddir" value="build"/>
    <property name="workdir" value="${builddir}/tmp"/>
    <property name="distrdir" value="${builddir}/distr"/>

    <target name="clean">
        <delete dir="${builddir}"/>
    </target>

    <target name="prepare-assets">
        <copy todir="${distrdir}">
            <fileset dir="${basedir}/assets">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <target name="-fetch-cppTango">
        <exec executable="git" dir="${workdir}" failonerror="true" failifexecutionfails="true">
            <arg value="clone"/>
            <arg line="-b ${cppTango}"/>
            <arg value="${src-root-repo}/cppTango"/>
            <arg value="cpp"/>
        </exec>
    </target>

    <target name="-move-cppTango" depends="-fetch-cppTango">
        <move todir="${distrdir}/lib/cpp">
            <fileset dir="${workdir}/cpp"/>
        </move>
    </target>

    <target name="-fetch-TangoDatabase">
        <exec executable="git" dir="${workdir}" failonerror="true" failifexecutionfails="true">
            <arg value="clone"/>
            <arg line="-b ${TangoDatabase}"/>
            <arg value="${src-root-repo}/TangoDatabase"/>
            <arg value="database"/>
        </exec>
    </target>

    <target name="-move-TangoDatabase" depends="-fetch-TangoDatabase">
        <move todir="${distrdir}/cppserver/database">
            <fileset dir="${workdir}/database"/>
        </move>
    </target>

    <target name="-fetch-starter">
        <exec executable="git" dir="${workdir}" failonerror="true" failifexecutionfails="true">
            <arg value="clone"/>
            <arg line="-b ${starter}"/>
            <arg value="${src-root-repo}/starter"/>
            <arg value="starter"/>
        </exec>
    </target>

    <target name="-move-starter" depends="-fetch-starter">
        <move todir="${distrdir}/cppserver/starter">
            <fileset dir="${workdir}/starter"/>
        </move>
    </target>

    <target name="-fetch-TangoAccessControl">
        <exec executable="git" dir="${workdir}" failonerror="true" failifexecutionfails="true">
            <arg value="clone"/>
            <arg line="-b ${TangoAccessControl}"/>
            <arg value="${src-root-repo}/TangoAccessControl"/>
            <arg value="tangoaccesscontrol"/>
        </exec>
    </target>

    <target name="-move-TangoAccessControl" depends="-fetch-TangoAccessControl">
        <move todir="${distrdir}/cppserver/tangoaccesscontrol">
            <fileset dir="${workdir}/tangoaccesscontrol"/>
        </move>
    </target>

    <target name="-fetch-TangoTest">
        <exec executable="git" dir="${workdir}" failonerror="true" failifexecutionfails="true">
            <arg value="clone"/>
            <arg line="-b ${TangoTest}"/>
            <arg value="${src-root-repo}/TangoTest"/>
            <arg value="tangotest"/>
        </exec>
    </target>

    <target name="-move-TangoTest" depends="-fetch-TangoTest">
        <move todir="${distrdir}/cppserver/tangotest">
            <fileset dir="${workdir}/tangotest"/>
        </move>
    </target>

    <target name="prepare-cppserver" depends="-mkdirs">

        <antcall target="-move-TangoDatabase"/>
        <antcall target="-move-starter"/>
        <antcall target="-move-TangoTest"/>
    </target>

    <target name="-mkdirs">
        <mkdir dir="${workdir}"/>
        <mkdir dir="${distrdir}/lib"/>
        <mkdir dir="${distrdir}/doc"/>
        <mkdir dir="${distrdir}/cppserver"/>
        <mkdir dir="${distrdir}/utils"/>
    </target>

    <target name="-fetch-JTango">
        <get src="${jtango-root-repo}=${JTango}.jar" dest="${workdir}/${JTango}.jar" skipexisting="true"/>
    </target>

    <target name="-move-JTango" depends="-fetch-JTango">
        <move file="${workdir}/${JTango}.jar" todir="${distrdir}/lib/java"/>
    </target>

    <!-- Jive -->
    <property name="jive-jar" value="Jive-${jive-ver}.jar"/>
    <property name="jive-url" value="${java-root-repo}=org%2Ftango%2FJive%2F${jive-ver}%2F${jive-jar}"/>

    <target name="-fetch-jive">
        <get src="${jive-url}" dest="${workdir}/${jive-jar}" skipexisting="true"/>
    </target>

    <target name="-move-jive" depends="-fetch-jive">
        <move file="${workdir}/${jive-jar}" todir="${distrdir}/lib/java"/>
    </target>
    <!-- Jive -->

    <!-- ATKCore -->
    <property name="atk-core-jar" value="ATKCore-${atk-ver}.jar"/>
    <property name="atk-core-url" value="${java-root-repo}=org%2Ftango%2Fatk%2FATKCore%2F${atk-ver}%2F${atk-core-jar}"/>

    <target name="-fetch-atkcore">
        <get src="${atk-core-url}" dest="${workdir}/${atk-core-jar}" skipexisting="true"/>
    </target>

    <target name="-move-atkcore" depends="-fetch-atkcore">
        <move file="${workdir}/${atk-core-jar}" todir="${distrdir}/lib/java"/>
    </target>
    <!-- ATKCore -->

    <!-- ATKWidget -->
    <property name="atk-widget-jar" value="ATKWidget-${atk-ver}.jar"/>
    <property name="atk-widget-url" value="${java-root-repo}=org%2Ftango%2Fatk%2FATKWidget%2F${atk-ver}%2F${atk-widget-jar}"/>

    <target name="-fetch-atkwidget">
        <get src="${atk-widget-url}" dest="${workdir}/${atk-widget-jar}" skipexisting="true"/>
    </target>

    <target name="-move-atkwidget" depends="-fetch-atkwidget">
        <move file="${workdir}/${atk-widget-jar}" todir="${distrdir}/lib/java"/>
    </target>
    <!-- ATKWidget -->

    <!-- ATKPanel -->
    <property name="atk-panel-jar" value="ATKPanel-${atk-panel-ver}.jar"/>
    <property name="atk-panel-url" value="${java-root-repo}=org%2Ftango%2Fgui%2FATKPanel%2F${atk-panel-ver}%2F${atk-panel-jar}"/>

    <target name="-fetch-atkpanel">
        <get src="${atk-panel-url}" dest="${workdir}/${atk-panel-jar}" skipexisting="true"/>
    </target>

    <target name="-move-atkpanel" depends="-fetch-atkpanel">
        <move file="${workdir}/${atk-panel-jar}" todir="${distrdir}/lib/java"/>
    </target>
    <!-- ATKPanel -->

    <!-- ATKTuning -->
    <property name="atk-tuning-jar" value="ATKTuning-${atk-tuning-ver}.jar"/>
    <property name="atk-tuning-url" value="${java-root-repo}=org%2Ftango%2Fatk%2FATKTuning%2F${atk-tuning-ver}%2F${atk-tuning-jar}"/>

    <target name="-fetch-atktuning">
        <get src="${atk-tuning-url}" dest="${workdir}/${atk-tuning-jar}" skipexisting="true"/>
    </target>

    <target name="-move-atktuning" depends="-fetch-atktuning">
        <move file="${workdir}/${atk-tuning-jar}" todir="${distrdir}/lib/java"/>
    </target>
    <!-- ATKTuning -->

    <!-- Astor -->
    <property name="astor-jar" value="Astor-${astor-ver}.jar"/>
    <property name="astor-url" value="${java-root-repo}=org%2Ftango%2Fgui%2FAstor%2F${astor-ver}%2F${astor-jar}"/>

    <target name="-fetch-astor">
        <get src="${astor-url}" dest="${workdir}/${astor-jar}" skipexisting="true"/>
    </target>

    <target name="-move-astor" depends="-fetch-astor">
        <move file="${workdir}/${astor-jar}" todir="${distrdir}/lib/java"/>
    </target>
    <!-- Astor -->

    <!-- DBBench -->
    <property name="dbbench-jar" value="DBBench-${dbbench-ver}.jar"/>
    <property name="dbbench-url" value="${java-root-repo}=org%2Ftango%2FDBBench%2F${dbbench-ver}%2F${dbbench-jar}"/>

    <target name="-fetch-dbbench">
        <get src="${dbbench-url}" dest="${workdir}/${dbbench-jar}" skipexisting="true"/>
    </target>

    <target name="-move-dbbench" depends="-fetch-dbbench">
        <move file="${workdir}/${dbbench-jar}" todir="${distrdir}/lib/java"/>
    </target>
    <!-- DBBench -->

    <!-- JSSHTerminal -->
    <property name="jssh-terminal-jar" value="JSSHTerminal-${jssh-terminal-ver}.jar"/>
    <property name="jssh-terminal-url" value="${java-root-repo}=org%2Ftango%2FJSSHTerminal%2F${jssh-terminal-ver}%2F${jssh-terminal-jar}"/>

    <target name="-fetch-jssh-terminal">
        <get src="${jssh-terminal-url}" dest="${workdir}/${jssh-terminal-jar}" skipexisting="true"/>
    </target>

    <target name="-move-jssh-terminal" depends="-fetch-jssh-terminal">
        <move file="${workdir}/${jssh-terminal-jar}" todir="${distrdir}/lib/java"/>
    </target>
    <!-- JSSHTerminal -->

    <!-- LogViewer -->
    <property name="log-viewer-jar" value="LogViewer-${log-viewer-ver}.jar"/>
    <property name="log-viewer-url" value="${java-root-repo}=org%2Ftango%2Fgui%2FLogViewer%2F${log-viewer-ver}%2F${log-viewer-jar}"/>

    <target name="-fetch-log-viewer">
        <get src="${log-viewer-url}" dest="${workdir}/${log-viewer-jar}" skipexisting="true"/>
    </target>

    <target name="-move-log-viewer" depends="-fetch-log-viewer">
        <move file="${workdir}/${log-viewer-jar}" todir="${distrdir}/lib/java"/>
    </target>
    <!-- LogViewer -->

    <!-- Pogo -->
    <property name="pogo-jar" value="Pogo-${pogo-ver}.jar"/>
    <property name="pogo-url" value="${java-root-repo}=org%2Ftango%2Ftools%2Fpogo%2Fgui%2FPogo%2F${pogo-ver}%2F${pogo-jar}"/>

    <target name="-fetch-pogo">
        <get src="${pogo-url}" dest="${workdir}/${pogo-jar}" skipexisting="true"/>
    </target>

    <target name="-move-pogo" depends="-fetch-pogo">
        <move file="${workdir}/${pogo-jar}" todir="${distrdir}/lib/java"/>
    </target>
    <!-- Pogo -->

    <target name="-fetch-tango-idl">
        <exec executable="git" dir="${workdir}" failonerror="true" failifexecutionfails="true">
            <arg value="clone"/>
            <arg line="-b ${tango-idl}"/>
            <arg value="${src-root-repo}/tango-idl"/>
            <arg value="idl"/>
        </exec>
    </target>

    <target name="-move-tango-idl" depends="-fetch-tango-idl">
        <move todir="${distrdir}/lib/idl">
            <fileset dir="${workdir}/idl"/>
        </move>
    </target>

    <target name="prepare-java" depends="-mkdirs">
        <antcall target="-move-jive"/>
        <antcall target="-move-atkcore"/>
        <antcall target="-move-atkwidget"/>
        <antcall target="-move-atkpanel"/>
        <antcall target="-move-atktuning"/>
        <antcall target="-move-astor"/>
        <antcall target="-move-dbbench"/>
        <antcall target="-move-jssh-terminal"/>
        <antcall target="-move-log-viewer"/>
        <antcall target="-move-pogo"/>
    </target>

    <target name="prepare-lib" depends="-mkdirs">
        <antcall target="-move-cppTango"/>
        <antcall target="-move-tango-idl"/>
        <antcall target="-move-JTango"/>
    </target>

    <!-- Doc -->
    <target name="-fetch-docs">
        <get src="${docs-root-repo}/${docs-ver}" dest="${workdir}/tango-${docs-ver}.pdf" skipexisting="true"/>
    </target>

    <target name="-move-docs" depends="-fetch-docs">
        <move file="${workdir}/tango-${docs-ver}.pdf" todir="${distrdir}/doc"/>
    </target>
    <!-- Doc -->


    <target name="prepare-doc" depends="-mkdirs">
        <antcall target="-move-docs"/>
    </target>

    <target name="-fetch-tango_admin">
        <exec executable="git" dir="${workdir}" failonerror="true" failifexecutionfails="true">
            <arg value="clone"/>
            <arg line="-b ${tango_admin}"/>
            <arg value="${src-root-repo}/tango_admin"/>
            <arg value="tango_admin"/>
        </exec>
    </target>

    <target name="-move-tango_admin" depends="-fetch-tango_admin">
        <move todir="${distrdir}/utils/tango_admin">
            <fileset dir="${workdir}/tango_admin"/>
        </move>
    </target>


    <target name="prepare-utils" depends="-mkdirs">
        <antcall target="-move-tango_admin"/>
    </target>

    <target name="prepare-distribution" depends="-mkdirs">
        <antcall target="prepare-assets"/>

        <antcall target="prepare-cppserver"/>

        <antcall target="prepare-doc"/>

        <antcall target="prepare-lib"/>

        <antcall target="prepare-java"/>

        <antcall target="prepare-utils"/>
    </target>

    <target name="cleanup-distribution">
        <exec executable="/bin/bash" dir="${distrdir}" failifexecutionfails="true" failonerror="true">
            <arg value="${basedir}/cleanup_distrib"/>
        </exec>
    </target>

    <target name="build" depends="prepare-distribution, cleanup-distribution">
        <echo>Done!</echo>
    </target>
</project>